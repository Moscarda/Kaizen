/*------------------------------------------------------------------------------
	Grid
	Usage:
		- '.full-width' Fill container and ignore max-width constraint
		- '.collapse' removes gutters from child columns
		- Default breakpoint grids are set at the bottom of this page

	Acknowledgements:
	We have taken a lot of inspiration from Lee Jordan's Reflex grid, we suggest
	you check it out if you're only looking for a grid.
	https://github.com/leejordan/reflex
------------------------------------------------------------------------------*/

/*------------------------------------------------------------------------------
	Grid helpers
	- .row-center-columns will center align all columns in the row
------------------------------------------------------------------------------*/
.row-center-columns{
  [class*="column"],  [class*="columns"]{
    margin: 0 auto;
  }
}

/*------------------------------------------------------------------------------
	Grid mixins
------------------------------------------------------------------------------*/
@mixin setupWhitespace() {
  letter-spacing: -0.31em !important;
  *letter-spacing: normal !important;
  word-spacing: -0.43em !important;
}
@mixin resetWhitespace() {
  letter-spacing: normal;
  word-spacing: normal;
  white-space: normal;
}
@mixin flex($grow: 0, $shrink: 1, $basis: auto) {
  @if $basis == 0px {
		-ms-flex: $grow $shrink $basis;
    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
  } @else{
		-ms-flex: $grow $shrink auto; //ie10 needs auto
    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
	}
}
@mixin calc-columns($index, $class, $type) {
  @if $type == width and $index > 0 {
    .#{$class}#{$index} {
      width: percentage(($index / $columns));
      *width: percentage(($index / $columns)) - 0.1;
    }
  }
}
@mixin make-grid($class) {
  @include loop-columns($columns, $class, width);
}
@mixin loop-columns($index, $class, $type) {
  @if $index >= 0 {
    @include calc-columns($index, $class, $type);
    // next iteration
    @include loop-columns(($index - 1), $class, $type);
  }
}
@mixin resetTextAlign() {
  // We want to reset any text-align properties set by the grid
  // (required for the inline-block fallback)
  // but we don't want to override any text-align properties
  // set on the individual grid__col-x element
  // or on any of it's child elements
  //
  // The "initial" property is not widely supported so a default of "left" and "start" is provided
  // http://caniuse.com/#search=initial
  //
  // 1) set to left by default (works everywhere)
  // 2) set to start (respects right to left text)
  // 3) set to initial
  //
  text-align: left;
  text-align: start;
  text-align: initial;
  -moz-text-align-last: left;
  -moz-text-align-last: start;
  -moz-text-align-last: initial;
  text-align-last: left;
  text-align-last: start;
  text-align-last: initial;
}

/*------------------------------------------------------------------------------
	Building blocks for grid
------------------------------------------------------------------------------*/
// Container .row
.row{
	@include display(flex);
	@include flex-wrap(wrap);
	padding: 0;
	margin: 0 auto;
	position: relative;
	width: 100%;
	max-width: $max-width;

	@include setupWhitespace();

	&:before,
	&:after{
		@include resetWhitespace();
		max-width: 100%;
	}

	// nested rows
	.row{
		@include flex(1, 1, auto);
	}

	// Fill display by adding full-width class to row
	&.full-width{
		max-width: 100%;
	}

	// Removes gutters/padding from child columns
	&.collapse > .column, &.collapse > .columns{
		padding-left: 0;
    padding-right: 0;
	}
}

	// General Column styles
	[class*="column"],  [class*="columns"]{
		@include display(flex);
	  @include flex-direction(column);
	  @include resetTextAlign();
	  @include resetWhitespace();
	  position: relative;
	  width: 100%;
	  vertical-align: top;
	  padding: 0 $gutter-size;
	}

/*------------------------------------------------------------------------------
	Generate grids
	- You can easily create more, we've commented out one example
------------------------------------------------------------------------------*/
// Small grid
@include make-grid(small-);

// Medium grid
@media (min-width: $medium-breakpoint) {
  @include make-grid(medium-);
}

// Large grid
@media (min-width: $large-breakpoint) {
  @include make-grid(large-);
}

// Extra Large grid
// @media (min-width: ($large-breakpoint * 1.5)) {
//   @include make-grid(xlarge-);
// }
