/*------------------------------------------------------------------------------
	Grid
	Usage:
		- '.full-width' Fill container and ignore max-width constraint
		- '.collapse' removes gutters from child columns
		- Default breakpoint grids are set at the bottom of this page

	Acknowledgements:
	We have taken a lot of inspiration from Lee Jordan's Reflex grid, we suggest
	you check it out if you're only looking for a grid.
	https://github.com/leejordan/reflex
------------------------------------------------------------------------------*/
//
// // Base grid - Contains things that generally won't change and fallback grid
// .row{
// 	width: 100%;
// 	margin-left: auto;
// 	margin-right: auto;
// 	margin-top: 0;
// 	margin-bottom: 0;
// 	max-width: $max-width;
// 	// Fill container and ignore max-width constraint
// 	&.full-width{
// 		max-width: 100%;
// 	}
// 	&:before, &:after{
// 		content: " ";
//     display: table;
// 	}
// 	&:after{
// 		clear: both;
// 	}
// 	&.collapse > .column, &.collapse > .columns{
// 		padding-left: 0;
//     padding-right: 0;
// 	}
// 	&.collapse{
// 		.row{
// 			margin-left: 0;
//     	margin-right: 0;
// 		}
// 	}
// 	// Child rows
// 	.row{
// 		width: auto;
//     max-width: none;
//     &:before, &:after{
//     	content: " ";
//     		display: table;
//     }
//     &:after{
//     	clear: both;
//     }
// 	}
// }
// 	// Columns default properties
// 	.column, .columns{
// 		position: relative;
// 		padding-left: $gutter-size;
// 		padding-right: $gutter-size;
// 		width: 100%;
// 		float: left;
//
// 		// float last column to the right
// 		&.end{
// 		    float: right;
// 		}
// 	}
//
// /*------------------------------------------------------------------------------
// 	Grid mixin:
// 	- to create a breakpoint @include breakpoint-grid(name, mediaquery, breakpoint);
// ------------------------------------------------------------------------------*/
// @mixin breakpoint-grid($name, $mediaquery, $breakpoint) {
// 	@if $mediaquery {
// 		@media only screen and (min-width: $breakpoint){
// 			.#{$name}{
// 				&-1{
// 					width: 8.33333%;
// 				}
// 				&-2{
// 					width: 16.66667%;
// 				}
// 				&-3{
// 					width: 25%;
// 				}
// 				&-4{
// 					width: 33.33333%;
// 				}
// 				&-5{
// 					width: 41.66667%;
// 				}
// 				&-6{
// 					width: 50%;
// 				}
// 				&-7{
// 					width: 58.33333%;
// 				}
// 				&-8{
// 					width: 66.66667%;
// 				}
// 				&-9{
// 					width: 75%;
// 				}
// 				&-10{
// 					width: 83.33333%;
// 				}
// 				&-11{
// 					width: 91.66667%;
// 				}
// 				&-12{
// 					width: 100%;
// 				}
// 			}
// 			.column, .columns{
// 				// Center column on this breakpoint
// 				&.#{$name}-centered{
// 					margin-left: auto;
// 			    margin-right: auto;
// 			    float: none;
//
// 					&:last-child{
// 						float: none;
// 					}
// 				}
// 				&.#{$name}-uncentered{
// 					margin-left: 0;
// 			    margin-right: 0;
// 			    float: left;
//
// 					&:last-child{
// 						float: left;
// 					}
// 				}
// 			}
// 	  }
// 	}
// 	@else {
// 		.#{$name}{
// 			&-1{
// 				width: 8.33333%;
// 			}
// 			&-2{
// 				width: 16.66667%;
// 			}
// 			&-3{
// 				width: 25%;
// 			}
// 			&-4{
// 				width: 33.33333%;
// 			}
// 			&-5{
// 				width: 41.66667%;
// 			}
// 			&-6{
// 				width: 50%;
// 			}
// 			&-7{
// 				width: 58.33333%;
// 			}
// 			&-8{
// 				width: 66.66667%;
// 			}
// 			&-9{
// 				width: 75%;
// 			}
// 			&-10{
// 				width: 83.33333%;
// 			}
// 			&-11{
// 				width: 91.66667%;
// 			}
// 			&-12{
// 				width: 100%;
// 			}
// 		}
// 		.column, .columns{
// 			// Center column on this breakpoint
// 			&.#{$name}-centered{
// 				margin-left: auto;
// 				margin-right: auto;
// 				float: none;
//
// 				&:last-child{
// 					float: none;
// 				}
// 			}
// 			&.#{$name}-uncentered{
// 				margin-left: 0;
// 				margin-right: 0;
// 				float: left;
//
// 				&:last-child{
// 					float: left;
// 				}
// 			}
// 		}
// 	}
// }
//
// /*------------------------------------------------------------------------------
// 	Default breakpoint grids
// ------------------------------------------------------------------------------*/
// @include breakpoint-grid(small, false, null); // example: .small-6
// @include breakpoint-grid(medium, true, $medium-breakpoint); // example: .medium-6
// @include breakpoint-grid(large, true, $large-breakpoint);  // example: .large-6

/*------------------------------------------------------------------------------
	Grid mixins
------------------------------------------------------------------------------*/
@mixin setupWhitespace() {
  letter-spacing: -0.31em !important;
  *letter-spacing: normal !important;
  word-spacing: -0.43em !important;
}
@mixin resetWhitespace() {
  letter-spacing: normal;
  word-spacing: normal;
  white-space: normal;
}
@mixin flex($grow: 0, $shrink: 1, $basis: auto) {
  @if $basis == 0px {
		-ms-flex: $grow $shrink $basis;
    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
  } @else{
		-ms-flex: $grow $shrink auto; //ie10 needs auto
    -webkit-flex: $grow $shrink $basis;
    flex: $grow $shrink $basis;
	}
}
@mixin calc-columns($index, $class, $type) {
  @if $type == width and $index > 0 {
    .#{$class}#{$index} {
      width: percentage(($index / $columns));
      *width: percentage(($index / $columns)) - 0.1;

      //for ie6 support you can uncomment this line but it will increase css filesize dramatically
      //@include setupCols();
    }
  }
}
@mixin make-grid($class) {
  @include loop-columns($columns, $class, width);
}
@mixin loop-columns($index, $class, $type) {
  @if $index >= 0 {
    @include calc-columns($index, $class, $type);
    // next iteration
    @include loop-columns(($index - 1), $class, $type);
  }
}
@mixin resetTextAlign() {
  // We want to reset any text-align properties set by the grid
  // (required for the inline-block fallback)
  // but we don't want to override any text-align properties
  // set on the individual grid__col-x element
  // or on any of it's child elements
  //
  // The "initial" property is not widely supported so a default of "left" and "start" is provided
  // http://caniuse.com/#search=initial
  //
  // 1) set to left by default (works everywhere)
  // 2) set to start (respects right to left text)
  // 3) set to initial
  //
  text-align: left;
  text-align: start;
  text-align: initial;
  -moz-text-align-last: left;
  -moz-text-align-last: start;
  -moz-text-align-last: initial;
  text-align-last: left;
  text-align-last: start;
  text-align-last: initial;
}




/*------------------------------------------------------------------------------
	Building blocks for grid
------------------------------------------------------------------------------*/
// Container .row
.row{
	@include display(flex);
	@include flex-wrap(wrap);
	padding: 0;
	margin: 0 auto;
	position: relative;
	width: 100%;
	max-width: $max-width;

	@include setupWhitespace();

	&:before,
	&:after{
		@include resetWhitespace();
		max-width: 100%;
	}

	// nested rows
	.row{
		@include flex(1, 1, auto);
	}

	// Fill display by adding full-width class to row
	&.full-width{
		max-width: 100%;
	}

	// Removes gutters/padding from child columns
	&.collapse > .column, &.collapse > .columns{
		padding-left: 0;
    padding-right: 0;
	}
}

	// General Column styles
	[class*="column"],  [class*="columns"]{
		@include display(flex);
	  @include flex-direction(column);
	  @include resetTextAlign();
	  @include resetWhitespace();
	  position: relative;
	  width: 100%;
	  vertical-align: top;
	  padding: 0 $gutter-size;
	}

/*------------------------------------------------------------------------------
	Grid helpers
	- You can easily create more, we've commented out one example
------------------------------------------------------------------------------*/
.row-columns-center{
  [class*="column"],  [class*="columns"]{
    margin: 0 auto;
  }
}

/*------------------------------------------------------------------------------
	Generate grids
	- You can easily create more, we've commented out one example
------------------------------------------------------------------------------*/
// Small grid
@include make-grid(small-);

// Medium grid
@media (min-width: $medium-breakpoint) {
  @include make-grid(medium-);
}

// Large grid
@media (min-width: $large-breakpoint) {
  @include make-grid(large-);
}

// Extra Large grid
// @media (min-width: ($large-breakpoint * 1.5)) {
//   @include make-grid(xlarge-);
// }
